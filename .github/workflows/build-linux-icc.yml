name: linux_icc
# CERN ROOT requires minimum cxx_standard: 17 --> cxx_standard: 14 only tested for core library
# CERN ROOT has to be compiled in a compatible version with regard to gcc/clang and cxx_standard
# For Qt the compiler and cxx_standard do not matter that much

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [icc-latest]
        cpp_standard: [17, 20]
        
    name: eudaq_core_build-ubuntu-latest-${{matrix.compiler}}-cxx_standard-${{matrix.cpp_standard}}

    steps:
    - uses: actions/checkout@v4
    
    - name: update repo
      run: |
        sudo apt-get update

    - name: add oneAPI to apt
      shell: bash
      run: |
        cd /tmp
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
      
    - name: install oneAPI dpcpp compiler
      shell: bash
      run: |
        sudo apt update
        sudo apt install intel-oneapi-compiler-dpcpp-cpp
       
    - name: install oneAPI MKL library
      shell: bash
      run: |
        sudo apt install intel-oneapi-mkl-devel
                  
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        source /opt/intel/oneapi/setvars.sh
        echo "Only core library on ICC for the moment."
        
        cmake -D CMAKE_CXX_COMPILER=${{ steps.install_cc.outputs.cxx }} \
        -D EUDAQ_BUILD_ONLINE_ROOT_MONITOR=OFF \
        -D EUDAQ_LIBRARY_BUILD_TTREE=OFF \
        -D EUDAQ_LIBRARY_BUILD_LCIO=OFF \
        -D EUDAQ_BUILD_STDEVENT_MONITOR=OFF \
        -D EUDAQ_BUILD_GUI=OFF \
        -D USER_ALIBAVA_BUILD=OFF \
        -D USER_CMSPHASE2_BUILD=OFF \
        -D USER_CMSPIXEL_BUILD=OFF \
        -D USER_CMSIT_BUILD=OFF \
        -D USER_EUDET_BUILD=OFF \
        -D USER_EXPERIMENTAL_BUILD=OFF \
        -D USER_ITKSTRIP_BUILD=OFF \
        -D USER_ITS3_BUILD=OFF \
        -D USER_STCONTROL_BUILD=ON \
        -D USER_TBSCDESY_BUILD=OFF \
        -D USER_TLU_BUILD=OFF \
        -D USER_XROOTD_BUILD=OFF \
        -D EUDAQ_BUILD_CORRYMONITOR=OFF \
        -B ${{github.workspace}}/build \
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
        -DCMAKE_CXX_COMPILER=dpcpp \
        -DCMAKE_C_COMPILER=icx \
        -DIntelDPCPP_DIR="/opt/intel/oneapi/compiler/latest/linux/cmake/SYCL" \
        -DMKL_ROOT="/opt/intel/oneapi/mkl/latest" \
        -DTBB_ROOT="/opt/intel/oneapi/tbb/latest"

    - name: Build
      # Build your program with the given configuration
      run: |
        source /opt/intel/oneapi/setvars.sh
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}  --verbose

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        source /opt/intel/oneapi/setvars.sh
        ctest -C ${{env.BUILD_TYPE}}
      
